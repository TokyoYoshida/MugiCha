Terminals which are not used

   '\n'
   '!'
   '"'


Rules never reduced

   69 primary_string: NAME


State 5 conflicts: 23 reduce/reduce
State 21 conflicts: 4 shift/reduce
State 22 conflicts: 4 shift/reduce
State 23 conflicts: 1 shift/reduce
State 40 conflicts: 6 reduce/reduce
State 45 conflicts: 10 shift/reduce
State 74 conflicts: 23 reduce/reduce
State 77 conflicts: 1 shift/reduce
State 97 conflicts: 23 reduce/reduce


Grammar

    0 $accept: prog $end

    1 prog: /* empty */
    2     | stmt

    3 stmt: expr
    4     | def_var
    5     | set_var
    6     | def_func
    7     | if_stmt
    8     | while_stmt
    9     | stmt stmt

   10 def_func: FUNCTION NAME '(' def_var ')' TYPE_LITERAL '{' stmt '}'
   11         | FUNCTION NAME '(' ')' TYPE_LITERAL '{' stmt '}'

   12 def_var: VAR NAME TYPE_LITERAL

   13 set_var: NAME '=' expr

   14 if_stmt: IF expr_bool '{' stmt '}' ELSE '{' stmt '}'

   15 while_stmt: WHILE expr_bool '{' stmt '}'

   16 expr: expr_int
   17     | expr_print
   18     | expr_bool
   19     | expr_double
   20     | expr_string
   21     | call_func
   22     | expr '+' expr
   23     | expr '-' expr
   24     | expr '*' expr
   25     | expr '/' expr

   26 call_func: NAME '(' set_var ')'
   27          | NAME '(' ')'

   28 expr_print: PRINT '(' stmt ')'
   29           | PRINT '(' expr ')'

   30 expr_int: expr_int '+' expr_int
   31         | expr_int '-' expr_int
   32         | expr_int '*' expr_int
   33         | expr_int '/' expr_int
   34         | primary_int

   35 expr_double: expr_double '+' expr_double
   36            | expr_double '-' expr_double
   37            | expr_double '*' expr_double
   38            | expr_double '/' expr_double
   39            | primary_double

   40 expr_string: expr_string '+' expr_string
   41            | expr_string '+' expr_int
   42            | expr_string '+' expr_double
   43            | expr_string '+' expr_bool
   44            | primary_string

   45 expr_bool: primary_bool
   46          | expr_cmp_eq
   47          | expr_cmp_noteq
   48          | expr_cmp_greater
   49          | expr_cmp_smaller
   50          | expr_cmp_greaterequal
   51          | expr_cmp_smallerequal

   52 expr_cmp_eq: primary_int EQUAL primary_int
   53            | primary_bool EQUAL primary_bool

   54 expr_cmp_noteq: primary_int NOTEQUAL primary_int
   55               | primary_bool NOTEQUAL primary_bool

   56 expr_cmp_greater: primary_int '>' primary_int
   57                 | primary_bool '>' primary_bool

   58 expr_cmp_smaller: primary_int '<' primary_int
   59                 | primary_bool '<' primary_bool

   60 expr_cmp_greaterequal: primary_int GREATEREQUAL primary_int
   61                      | primary_bool GREATEREQUAL primary_bool

   62 expr_cmp_smallerequal: primary_int SMALLEREQUAL primary_int
   63                      | primary_bool SMALLEREQUAL primary_bool

   64 primary_int: INT_LITERAL
   65            | NAME

   66 primary_double: DOUBLE_LITERAL
   67               | NAME

   68 primary_string: STRING_LITERAL
   69               | NAME

   70 primary_bool: BOOL_LITERAL
   71             | NAME


Terminals, with rules where they appear

$end (0) 0
'\n' (10)
'!' (33)
'"' (34)
'(' (40) 10 11 26 27 28 29
')' (41) 10 11 26 27 28 29
'*' (42) 24 32 37
'+' (43) 22 30 35 40 41 42 43
'-' (45) 23 31 36
'/' (47) 25 33 38
'<' (60) 58 59
'=' (61) 13
'>' (62) 56 57
'{' (123) 10 11 14 15
'}' (125) 10 11 14 15
error (256)
DOUBLE_LITERAL (258) 66
INT_LITERAL (259) 64
BOOL_LITERAL (260) 70
STRING_LITERAL (261) 68
NAME (262) 10 11 12 13 26 27 65 67 69 71
TYPE_LITERAL (263) 10 11 12
EQUAL (264) 52 53
PRINT (265) 28 29
VAR (266) 12
FUNCTION (267) 10 11
NOTEQUAL (268) 54 55
SMALLEREQUAL (269) 62 63
GREATEREQUAL (270) 60 61
IF (271) 14
ELSE (272) 14
WHILE (273) 15


Nonterminals, with rules where they appear

$accept (33)
    on left: 0
prog (34)
    on left: 1 2, on right: 0
stmt (35)
    on left: 3 4 5 6 7 8 9, on right: 2 9 10 11 14 15 28
def_func (36)
    on left: 10 11, on right: 6
def_var (37)
    on left: 12, on right: 4 10
set_var (38)
    on left: 13, on right: 5 26
if_stmt (39)
    on left: 14, on right: 7
while_stmt (40)
    on left: 15, on right: 8
expr (41)
    on left: 16 17 18 19 20 21 22 23 24 25, on right: 3 13 22 23 24
    25 29
call_func (42)
    on left: 26 27, on right: 21
expr_print (43)
    on left: 28 29, on right: 17
expr_int (44)
    on left: 30 31 32 33 34, on right: 16 30 31 32 33 41
expr_double (45)
    on left: 35 36 37 38 39, on right: 19 35 36 37 38 42
expr_string (46)
    on left: 40 41 42 43 44, on right: 20 40 41 42 43
expr_bool (47)
    on left: 45 46 47 48 49 50 51, on right: 14 15 18 43
expr_cmp_eq (48)
    on left: 52 53, on right: 46
expr_cmp_noteq (49)
    on left: 54 55, on right: 47
expr_cmp_greater (50)
    on left: 56 57, on right: 48
expr_cmp_smaller (51)
    on left: 58 59, on right: 49
expr_cmp_greaterequal (52)
    on left: 60 61, on right: 50
expr_cmp_smallerequal (53)
    on left: 62 63, on right: 51
primary_int (54)
    on left: 64 65, on right: 34 52 54 56 58 60 62
primary_double (55)
    on left: 66 67, on right: 39
primary_string (56)
    on left: 68 69, on right: 44
primary_bool (57)
    on left: 70 71, on right: 45 53 55 57 59 61 63


state 0

    0 $accept: . prog $end

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    $default  reduce using rule 1 (prog)

    prog                   go to state 11
    stmt                   go to state 12
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 1

   66 primary_double: DOUBLE_LITERAL .

    $default  reduce using rule 66 (primary_double)


state 2

   64 primary_int: INT_LITERAL .

    $default  reduce using rule 64 (primary_int)


state 3

   70 primary_bool: BOOL_LITERAL .

    $default  reduce using rule 70 (primary_bool)


state 4

   68 primary_string: STRING_LITERAL .

    $default  reduce using rule 68 (primary_string)


state 5

   13 set_var: NAME . '=' expr
   26 call_func: NAME . '(' set_var ')'
   27          | NAME . '(' ')'
   65 primary_int: NAME .
   67 primary_double: NAME .
   69 primary_string: NAME .
   71 primary_bool: NAME .

    '('  shift, and go to state 35
    '='  shift, and go to state 36

    $end            reduce using rule 65 (primary_int)
    $end            [reduce using rule 67 (primary_double)]
    $end            [reduce using rule 69 (primary_string)]
    $end            [reduce using rule 71 (primary_bool)]
    DOUBLE_LITERAL  reduce using rule 65 (primary_int)
    DOUBLE_LITERAL  [reduce using rule 67 (primary_double)]
    DOUBLE_LITERAL  [reduce using rule 69 (primary_string)]
    DOUBLE_LITERAL  [reduce using rule 71 (primary_bool)]
    INT_LITERAL     reduce using rule 65 (primary_int)
    INT_LITERAL     [reduce using rule 67 (primary_double)]
    INT_LITERAL     [reduce using rule 69 (primary_string)]
    INT_LITERAL     [reduce using rule 71 (primary_bool)]
    BOOL_LITERAL    reduce using rule 65 (primary_int)
    BOOL_LITERAL    [reduce using rule 67 (primary_double)]
    BOOL_LITERAL    [reduce using rule 69 (primary_string)]
    BOOL_LITERAL    [reduce using rule 71 (primary_bool)]
    STRING_LITERAL  reduce using rule 65 (primary_int)
    STRING_LITERAL  [reduce using rule 67 (primary_double)]
    STRING_LITERAL  [reduce using rule 69 (primary_string)]
    STRING_LITERAL  [reduce using rule 71 (primary_bool)]
    NAME            reduce using rule 65 (primary_int)
    NAME            [reduce using rule 67 (primary_double)]
    NAME            [reduce using rule 69 (primary_string)]
    NAME            [reduce using rule 71 (primary_bool)]
    '+'             reduce using rule 65 (primary_int)
    '+'             [reduce using rule 67 (primary_double)]
    '+'             [reduce using rule 69 (primary_string)]
    '+'             [reduce using rule 71 (primary_bool)]
    '-'             reduce using rule 65 (primary_int)
    '-'             [reduce using rule 67 (primary_double)]
    '-'             [reduce using rule 69 (primary_string)]
    '-'             [reduce using rule 71 (primary_bool)]
    '*'             reduce using rule 65 (primary_int)
    '*'             [reduce using rule 67 (primary_double)]
    '*'             [reduce using rule 69 (primary_string)]
    '*'             [reduce using rule 71 (primary_bool)]
    '/'             reduce using rule 65 (primary_int)
    '/'             [reduce using rule 67 (primary_double)]
    '/'             [reduce using rule 69 (primary_string)]
    '/'             [reduce using rule 71 (primary_bool)]
    ')'             reduce using rule 65 (primary_int)
    ')'             [reduce using rule 67 (primary_double)]
    ')'             [reduce using rule 69 (primary_string)]
    ')'             [reduce using rule 71 (primary_bool)]
    EQUAL           reduce using rule 65 (primary_int)
    EQUAL           [reduce using rule 71 (primary_bool)]
    PRINT           reduce using rule 65 (primary_int)
    PRINT           [reduce using rule 67 (primary_double)]
    PRINT           [reduce using rule 69 (primary_string)]
    PRINT           [reduce using rule 71 (primary_bool)]
    VAR             reduce using rule 65 (primary_int)
    VAR             [reduce using rule 67 (primary_double)]
    VAR             [reduce using rule 69 (primary_string)]
    VAR             [reduce using rule 71 (primary_bool)]
    FUNCTION        reduce using rule 65 (primary_int)
    FUNCTION        [reduce using rule 67 (primary_double)]
    FUNCTION        [reduce using rule 69 (primary_string)]
    FUNCTION        [reduce using rule 71 (primary_bool)]
    NOTEQUAL        reduce using rule 65 (primary_int)
    NOTEQUAL        [reduce using rule 71 (primary_bool)]
    '<'             reduce using rule 65 (primary_int)
    '<'             [reduce using rule 71 (primary_bool)]
    '>'             reduce using rule 65 (primary_int)
    '>'             [reduce using rule 71 (primary_bool)]
    SMALLEREQUAL    reduce using rule 65 (primary_int)
    SMALLEREQUAL    [reduce using rule 71 (primary_bool)]
    GREATEREQUAL    reduce using rule 65 (primary_int)
    GREATEREQUAL    [reduce using rule 71 (primary_bool)]
    IF              reduce using rule 65 (primary_int)
    IF              [reduce using rule 67 (primary_double)]
    IF              [reduce using rule 69 (primary_string)]
    IF              [reduce using rule 71 (primary_bool)]
    WHILE           reduce using rule 65 (primary_int)
    WHILE           [reduce using rule 67 (primary_double)]
    WHILE           [reduce using rule 69 (primary_string)]
    WHILE           [reduce using rule 71 (primary_bool)]
    '}'             reduce using rule 65 (primary_int)
    '}'             [reduce using rule 67 (primary_double)]
    '}'             [reduce using rule 69 (primary_string)]
    '}'             [reduce using rule 71 (primary_bool)]
    $default        reduce using rule 65 (primary_int)


state 6

   28 expr_print: PRINT . '(' stmt ')'
   29           | PRINT . '(' expr ')'

    '('  shift, and go to state 37


state 7

   12 def_var: VAR . NAME TYPE_LITERAL

    NAME  shift, and go to state 38


state 8

   10 def_func: FUNCTION . NAME '(' def_var ')' TYPE_LITERAL '{' stmt '}'
   11         | FUNCTION . NAME '(' ')' TYPE_LITERAL '{' stmt '}'

    NAME  shift, and go to state 39


state 9

   14 if_stmt: IF . expr_bool '{' stmt '}' ELSE '{' stmt '}'

    INT_LITERAL   shift, and go to state 2
    BOOL_LITERAL  shift, and go to state 3
    NAME          shift, and go to state 40

    expr_bool              go to state 41
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 42
    primary_bool           go to state 34


state 10

   15 while_stmt: WHILE . expr_bool '{' stmt '}'

    INT_LITERAL   shift, and go to state 2
    BOOL_LITERAL  shift, and go to state 3
    NAME          shift, and go to state 40

    expr_bool              go to state 43
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 42
    primary_bool           go to state 34


state 11

    0 $accept: prog . $end

    $end  shift, and go to state 44


state 12

    2 prog: stmt .
    9 stmt: stmt . stmt

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    $default  reduce using rule 2 (prog)

    stmt                   go to state 45
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 13

    6 stmt: def_func .

    $default  reduce using rule 6 (stmt)


state 14

    4 stmt: def_var .

    $default  reduce using rule 4 (stmt)


state 15

    5 stmt: set_var .

    $default  reduce using rule 5 (stmt)


state 16

    7 stmt: if_stmt .

    $default  reduce using rule 7 (stmt)


state 17

    8 stmt: while_stmt .

    $default  reduce using rule 8 (stmt)


state 18

    3 stmt: expr .
   22 expr: expr . '+' expr
   23     | expr . '-' expr
   24     | expr . '*' expr
   25     | expr . '/' expr

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49

    $default  reduce using rule 3 (stmt)


state 19

   21 expr: call_func .

    $default  reduce using rule 21 (expr)


state 20

   17 expr: expr_print .

    $default  reduce using rule 17 (expr)


state 21

   16 expr: expr_int .
   30 expr_int: expr_int . '+' expr_int
   31         | expr_int . '-' expr_int
   32         | expr_int . '*' expr_int
   33         | expr_int . '/' expr_int

    '+'  shift, and go to state 50
    '-'  shift, and go to state 51
    '*'  shift, and go to state 52
    '/'  shift, and go to state 53

    '+'       [reduce using rule 16 (expr)]
    '-'       [reduce using rule 16 (expr)]
    '*'       [reduce using rule 16 (expr)]
    '/'       [reduce using rule 16 (expr)]
    $default  reduce using rule 16 (expr)


state 22

   19 expr: expr_double .
   35 expr_double: expr_double . '+' expr_double
   36            | expr_double . '-' expr_double
   37            | expr_double . '*' expr_double
   38            | expr_double . '/' expr_double

    '+'  shift, and go to state 54
    '-'  shift, and go to state 55
    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    '+'       [reduce using rule 19 (expr)]
    '-'       [reduce using rule 19 (expr)]
    '*'       [reduce using rule 19 (expr)]
    '/'       [reduce using rule 19 (expr)]
    $default  reduce using rule 19 (expr)


state 23

   20 expr: expr_string .
   40 expr_string: expr_string . '+' expr_string
   41            | expr_string . '+' expr_int
   42            | expr_string . '+' expr_double
   43            | expr_string . '+' expr_bool

    '+'  shift, and go to state 58

    '+'       [reduce using rule 20 (expr)]
    $default  reduce using rule 20 (expr)


state 24

   18 expr: expr_bool .

    $default  reduce using rule 18 (expr)


state 25

   46 expr_bool: expr_cmp_eq .

    $default  reduce using rule 46 (expr_bool)


state 26

   47 expr_bool: expr_cmp_noteq .

    $default  reduce using rule 47 (expr_bool)


state 27

   48 expr_bool: expr_cmp_greater .

    $default  reduce using rule 48 (expr_bool)


state 28

   49 expr_bool: expr_cmp_smaller .

    $default  reduce using rule 49 (expr_bool)


state 29

   50 expr_bool: expr_cmp_greaterequal .

    $default  reduce using rule 50 (expr_bool)


state 30

   51 expr_bool: expr_cmp_smallerequal .

    $default  reduce using rule 51 (expr_bool)


state 31

   34 expr_int: primary_int .
   52 expr_cmp_eq: primary_int . EQUAL primary_int
   54 expr_cmp_noteq: primary_int . NOTEQUAL primary_int
   56 expr_cmp_greater: primary_int . '>' primary_int
   58 expr_cmp_smaller: primary_int . '<' primary_int
   60 expr_cmp_greaterequal: primary_int . GREATEREQUAL primary_int
   62 expr_cmp_smallerequal: primary_int . SMALLEREQUAL primary_int

    EQUAL         shift, and go to state 59
    NOTEQUAL      shift, and go to state 60
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    SMALLEREQUAL  shift, and go to state 63
    GREATEREQUAL  shift, and go to state 64

    $default  reduce using rule 34 (expr_int)


state 32

   39 expr_double: primary_double .

    $default  reduce using rule 39 (expr_double)


state 33

   44 expr_string: primary_string .

    $default  reduce using rule 44 (expr_string)


state 34

   45 expr_bool: primary_bool .
   53 expr_cmp_eq: primary_bool . EQUAL primary_bool
   55 expr_cmp_noteq: primary_bool . NOTEQUAL primary_bool
   57 expr_cmp_greater: primary_bool . '>' primary_bool
   59 expr_cmp_smaller: primary_bool . '<' primary_bool
   61 expr_cmp_greaterequal: primary_bool . GREATEREQUAL primary_bool
   63 expr_cmp_smallerequal: primary_bool . SMALLEREQUAL primary_bool

    EQUAL         shift, and go to state 65
    NOTEQUAL      shift, and go to state 66
    '<'           shift, and go to state 67
    '>'           shift, and go to state 68
    SMALLEREQUAL  shift, and go to state 69
    GREATEREQUAL  shift, and go to state 70

    $default  reduce using rule 45 (expr_bool)


state 35

   26 call_func: NAME '(' . set_var ')'
   27          | NAME '(' . ')'

    NAME  shift, and go to state 71
    ')'   shift, and go to state 72

    set_var  go to state 73


state 36

   13 set_var: NAME '=' . expr

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 74
    PRINT           shift, and go to state 6

    expr                   go to state 75
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 37

   28 expr_print: PRINT '(' . stmt ')'
   29           | PRINT '(' . expr ')'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    stmt                   go to state 76
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 77
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 38

   12 def_var: VAR NAME . TYPE_LITERAL

    TYPE_LITERAL  shift, and go to state 78


state 39

   10 def_func: FUNCTION NAME . '(' def_var ')' TYPE_LITERAL '{' stmt '}'
   11         | FUNCTION NAME . '(' ')' TYPE_LITERAL '{' stmt '}'

    '('  shift, and go to state 79


state 40

   65 primary_int: NAME .
   71 primary_bool: NAME .

    EQUAL         reduce using rule 65 (primary_int)
    EQUAL         [reduce using rule 71 (primary_bool)]
    NOTEQUAL      reduce using rule 65 (primary_int)
    NOTEQUAL      [reduce using rule 71 (primary_bool)]
    '<'           reduce using rule 65 (primary_int)
    '<'           [reduce using rule 71 (primary_bool)]
    '>'           reduce using rule 65 (primary_int)
    '>'           [reduce using rule 71 (primary_bool)]
    SMALLEREQUAL  reduce using rule 65 (primary_int)
    SMALLEREQUAL  [reduce using rule 71 (primary_bool)]
    GREATEREQUAL  reduce using rule 65 (primary_int)
    GREATEREQUAL  [reduce using rule 71 (primary_bool)]
    '{'           reduce using rule 71 (primary_bool)
    $default      reduce using rule 65 (primary_int)


state 41

   14 if_stmt: IF expr_bool . '{' stmt '}' ELSE '{' stmt '}'

    '{'  shift, and go to state 80


state 42

   52 expr_cmp_eq: primary_int . EQUAL primary_int
   54 expr_cmp_noteq: primary_int . NOTEQUAL primary_int
   56 expr_cmp_greater: primary_int . '>' primary_int
   58 expr_cmp_smaller: primary_int . '<' primary_int
   60 expr_cmp_greaterequal: primary_int . GREATEREQUAL primary_int
   62 expr_cmp_smallerequal: primary_int . SMALLEREQUAL primary_int

    EQUAL         shift, and go to state 59
    NOTEQUAL      shift, and go to state 60
    '<'           shift, and go to state 61
    '>'           shift, and go to state 62
    SMALLEREQUAL  shift, and go to state 63
    GREATEREQUAL  shift, and go to state 64


state 43

   15 while_stmt: WHILE expr_bool . '{' stmt '}'

    '{'  shift, and go to state 81


state 44

    0 $accept: prog $end .

    $default  accept


state 45

    9 stmt: stmt . stmt
    9     | stmt stmt .

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    DOUBLE_LITERAL  [reduce using rule 9 (stmt)]
    INT_LITERAL     [reduce using rule 9 (stmt)]
    BOOL_LITERAL    [reduce using rule 9 (stmt)]
    STRING_LITERAL  [reduce using rule 9 (stmt)]
    NAME            [reduce using rule 9 (stmt)]
    PRINT           [reduce using rule 9 (stmt)]
    VAR             [reduce using rule 9 (stmt)]
    FUNCTION        [reduce using rule 9 (stmt)]
    IF              [reduce using rule 9 (stmt)]
    WHILE           [reduce using rule 9 (stmt)]
    $default        reduce using rule 9 (stmt)

    stmt                   go to state 45
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 46

   22 expr: expr '+' . expr

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 74
    PRINT           shift, and go to state 6

    expr                   go to state 82
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 47

   23 expr: expr '-' . expr

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 74
    PRINT           shift, and go to state 6

    expr                   go to state 83
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 48

   24 expr: expr '*' . expr

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 74
    PRINT           shift, and go to state 6

    expr                   go to state 84
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 49

   25 expr: expr '/' . expr

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 74
    PRINT           shift, and go to state 6

    expr                   go to state 85
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 50

   30 expr_int: expr_int '+' . expr_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    expr_int     go to state 87
    primary_int  go to state 88


state 51

   31 expr_int: expr_int '-' . expr_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    expr_int     go to state 89
    primary_int  go to state 88


state 52

   32 expr_int: expr_int '*' . expr_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    expr_int     go to state 90
    primary_int  go to state 88


state 53

   33 expr_int: expr_int '/' . expr_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    expr_int     go to state 91
    primary_int  go to state 88


state 54

   35 expr_double: expr_double '+' . expr_double

    DOUBLE_LITERAL  shift, and go to state 1
    NAME            shift, and go to state 92

    expr_double     go to state 93
    primary_double  go to state 32


state 55

   36 expr_double: expr_double '-' . expr_double

    DOUBLE_LITERAL  shift, and go to state 1
    NAME            shift, and go to state 92

    expr_double     go to state 94
    primary_double  go to state 32


state 56

   37 expr_double: expr_double '*' . expr_double

    DOUBLE_LITERAL  shift, and go to state 1
    NAME            shift, and go to state 92

    expr_double     go to state 95
    primary_double  go to state 32


state 57

   38 expr_double: expr_double '/' . expr_double

    DOUBLE_LITERAL  shift, and go to state 1
    NAME            shift, and go to state 92

    expr_double     go to state 96
    primary_double  go to state 32


state 58

   40 expr_string: expr_string '+' . expr_string
   41            | expr_string '+' . expr_int
   42            | expr_string '+' . expr_double
   43            | expr_string '+' . expr_bool

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 97

    expr_int               go to state 98
    expr_double            go to state 99
    expr_string            go to state 100
    expr_bool              go to state 101
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 59

   52 expr_cmp_eq: primary_int EQUAL . primary_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    primary_int  go to state 102


state 60

   54 expr_cmp_noteq: primary_int NOTEQUAL . primary_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    primary_int  go to state 103


state 61

   58 expr_cmp_smaller: primary_int '<' . primary_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    primary_int  go to state 104


state 62

   56 expr_cmp_greater: primary_int '>' . primary_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    primary_int  go to state 105


state 63

   62 expr_cmp_smallerequal: primary_int SMALLEREQUAL . primary_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    primary_int  go to state 106


state 64

   60 expr_cmp_greaterequal: primary_int GREATEREQUAL . primary_int

    INT_LITERAL  shift, and go to state 2
    NAME         shift, and go to state 86

    primary_int  go to state 107


state 65

   53 expr_cmp_eq: primary_bool EQUAL . primary_bool

    BOOL_LITERAL  shift, and go to state 3
    NAME          shift, and go to state 108

    primary_bool  go to state 109


state 66

   55 expr_cmp_noteq: primary_bool NOTEQUAL . primary_bool

    BOOL_LITERAL  shift, and go to state 3
    NAME          shift, and go to state 108

    primary_bool  go to state 110


state 67

   59 expr_cmp_smaller: primary_bool '<' . primary_bool

    BOOL_LITERAL  shift, and go to state 3
    NAME          shift, and go to state 108

    primary_bool  go to state 111


state 68

   57 expr_cmp_greater: primary_bool '>' . primary_bool

    BOOL_LITERAL  shift, and go to state 3
    NAME          shift, and go to state 108

    primary_bool  go to state 112


state 69

   63 expr_cmp_smallerequal: primary_bool SMALLEREQUAL . primary_bool

    BOOL_LITERAL  shift, and go to state 3
    NAME          shift, and go to state 108

    primary_bool  go to state 113


state 70

   61 expr_cmp_greaterequal: primary_bool GREATEREQUAL . primary_bool

    BOOL_LITERAL  shift, and go to state 3
    NAME          shift, and go to state 108

    primary_bool  go to state 114


state 71

   13 set_var: NAME . '=' expr

    '='  shift, and go to state 36


state 72

   27 call_func: NAME '(' ')' .

    $default  reduce using rule 27 (call_func)


state 73

   26 call_func: NAME '(' set_var . ')'

    ')'  shift, and go to state 115


state 74

   26 call_func: NAME . '(' set_var ')'
   27          | NAME . '(' ')'
   65 primary_int: NAME .
   67 primary_double: NAME .
   69 primary_string: NAME .
   71 primary_bool: NAME .

    '('  shift, and go to state 35

    $end            reduce using rule 65 (primary_int)
    $end            [reduce using rule 67 (primary_double)]
    $end            [reduce using rule 69 (primary_string)]
    $end            [reduce using rule 71 (primary_bool)]
    DOUBLE_LITERAL  reduce using rule 65 (primary_int)
    DOUBLE_LITERAL  [reduce using rule 67 (primary_double)]
    DOUBLE_LITERAL  [reduce using rule 69 (primary_string)]
    DOUBLE_LITERAL  [reduce using rule 71 (primary_bool)]
    INT_LITERAL     reduce using rule 65 (primary_int)
    INT_LITERAL     [reduce using rule 67 (primary_double)]
    INT_LITERAL     [reduce using rule 69 (primary_string)]
    INT_LITERAL     [reduce using rule 71 (primary_bool)]
    BOOL_LITERAL    reduce using rule 65 (primary_int)
    BOOL_LITERAL    [reduce using rule 67 (primary_double)]
    BOOL_LITERAL    [reduce using rule 69 (primary_string)]
    BOOL_LITERAL    [reduce using rule 71 (primary_bool)]
    STRING_LITERAL  reduce using rule 65 (primary_int)
    STRING_LITERAL  [reduce using rule 67 (primary_double)]
    STRING_LITERAL  [reduce using rule 69 (primary_string)]
    STRING_LITERAL  [reduce using rule 71 (primary_bool)]
    NAME            reduce using rule 65 (primary_int)
    NAME            [reduce using rule 67 (primary_double)]
    NAME            [reduce using rule 69 (primary_string)]
    NAME            [reduce using rule 71 (primary_bool)]
    '+'             reduce using rule 65 (primary_int)
    '+'             [reduce using rule 67 (primary_double)]
    '+'             [reduce using rule 69 (primary_string)]
    '+'             [reduce using rule 71 (primary_bool)]
    '-'             reduce using rule 65 (primary_int)
    '-'             [reduce using rule 67 (primary_double)]
    '-'             [reduce using rule 69 (primary_string)]
    '-'             [reduce using rule 71 (primary_bool)]
    '*'             reduce using rule 65 (primary_int)
    '*'             [reduce using rule 67 (primary_double)]
    '*'             [reduce using rule 69 (primary_string)]
    '*'             [reduce using rule 71 (primary_bool)]
    '/'             reduce using rule 65 (primary_int)
    '/'             [reduce using rule 67 (primary_double)]
    '/'             [reduce using rule 69 (primary_string)]
    '/'             [reduce using rule 71 (primary_bool)]
    ')'             reduce using rule 65 (primary_int)
    ')'             [reduce using rule 67 (primary_double)]
    ')'             [reduce using rule 69 (primary_string)]
    ')'             [reduce using rule 71 (primary_bool)]
    EQUAL           reduce using rule 65 (primary_int)
    EQUAL           [reduce using rule 71 (primary_bool)]
    PRINT           reduce using rule 65 (primary_int)
    PRINT           [reduce using rule 67 (primary_double)]
    PRINT           [reduce using rule 69 (primary_string)]
    PRINT           [reduce using rule 71 (primary_bool)]
    VAR             reduce using rule 65 (primary_int)
    VAR             [reduce using rule 67 (primary_double)]
    VAR             [reduce using rule 69 (primary_string)]
    VAR             [reduce using rule 71 (primary_bool)]
    FUNCTION        reduce using rule 65 (primary_int)
    FUNCTION        [reduce using rule 67 (primary_double)]
    FUNCTION        [reduce using rule 69 (primary_string)]
    FUNCTION        [reduce using rule 71 (primary_bool)]
    NOTEQUAL        reduce using rule 65 (primary_int)
    NOTEQUAL        [reduce using rule 71 (primary_bool)]
    '<'             reduce using rule 65 (primary_int)
    '<'             [reduce using rule 71 (primary_bool)]
    '>'             reduce using rule 65 (primary_int)
    '>'             [reduce using rule 71 (primary_bool)]
    SMALLEREQUAL    reduce using rule 65 (primary_int)
    SMALLEREQUAL    [reduce using rule 71 (primary_bool)]
    GREATEREQUAL    reduce using rule 65 (primary_int)
    GREATEREQUAL    [reduce using rule 71 (primary_bool)]
    IF              reduce using rule 65 (primary_int)
    IF              [reduce using rule 67 (primary_double)]
    IF              [reduce using rule 69 (primary_string)]
    IF              [reduce using rule 71 (primary_bool)]
    WHILE           reduce using rule 65 (primary_int)
    WHILE           [reduce using rule 67 (primary_double)]
    WHILE           [reduce using rule 69 (primary_string)]
    WHILE           [reduce using rule 71 (primary_bool)]
    '}'             reduce using rule 65 (primary_int)
    '}'             [reduce using rule 67 (primary_double)]
    '}'             [reduce using rule 69 (primary_string)]
    '}'             [reduce using rule 71 (primary_bool)]
    $default        reduce using rule 65 (primary_int)


state 75

   13 set_var: NAME '=' expr .
   22 expr: expr . '+' expr
   23     | expr . '-' expr
   24     | expr . '*' expr
   25     | expr . '/' expr

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49

    $default  reduce using rule 13 (set_var)


state 76

    9 stmt: stmt . stmt
   28 expr_print: PRINT '(' stmt . ')'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    ')'             shift, and go to state 116
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    stmt                   go to state 45
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 77

    3 stmt: expr .
   22 expr: expr . '+' expr
   23     | expr . '-' expr
   24     | expr . '*' expr
   25     | expr . '/' expr
   29 expr_print: PRINT '(' expr . ')'

    '+'  shift, and go to state 46
    '-'  shift, and go to state 47
    '*'  shift, and go to state 48
    '/'  shift, and go to state 49
    ')'  shift, and go to state 117

    ')'       [reduce using rule 3 (stmt)]
    $default  reduce using rule 3 (stmt)


state 78

   12 def_var: VAR NAME TYPE_LITERAL .

    $default  reduce using rule 12 (def_var)


state 79

   10 def_func: FUNCTION NAME '(' . def_var ')' TYPE_LITERAL '{' stmt '}'
   11         | FUNCTION NAME '(' . ')' TYPE_LITERAL '{' stmt '}'

    ')'  shift, and go to state 118
    VAR  shift, and go to state 7

    def_var  go to state 119


state 80

   14 if_stmt: IF expr_bool '{' . stmt '}' ELSE '{' stmt '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    stmt                   go to state 120
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 81

   15 while_stmt: WHILE expr_bool '{' . stmt '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    stmt                   go to state 121
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 82

   22 expr: expr . '+' expr
   22     | expr '+' expr .
   23     | expr . '-' expr
   24     | expr . '*' expr
   25     | expr . '/' expr

    '*'  shift, and go to state 48
    '/'  shift, and go to state 49

    $default  reduce using rule 22 (expr)


state 83

   22 expr: expr . '+' expr
   23     | expr . '-' expr
   23     | expr '-' expr .
   24     | expr . '*' expr
   25     | expr . '/' expr

    '*'  shift, and go to state 48
    '/'  shift, and go to state 49

    $default  reduce using rule 23 (expr)


state 84

   22 expr: expr . '+' expr
   23     | expr . '-' expr
   24     | expr . '*' expr
   24     | expr '*' expr .
   25     | expr . '/' expr

    $default  reduce using rule 24 (expr)


state 85

   22 expr: expr . '+' expr
   23     | expr . '-' expr
   24     | expr . '*' expr
   25     | expr . '/' expr
   25     | expr '/' expr .

    $default  reduce using rule 25 (expr)


state 86

   65 primary_int: NAME .

    $default  reduce using rule 65 (primary_int)


state 87

   30 expr_int: expr_int . '+' expr_int
   30         | expr_int '+' expr_int .
   31         | expr_int . '-' expr_int
   32         | expr_int . '*' expr_int
   33         | expr_int . '/' expr_int

    '*'  shift, and go to state 52
    '/'  shift, and go to state 53

    $default  reduce using rule 30 (expr_int)


state 88

   34 expr_int: primary_int .

    $default  reduce using rule 34 (expr_int)


state 89

   30 expr_int: expr_int . '+' expr_int
   31         | expr_int . '-' expr_int
   31         | expr_int '-' expr_int .
   32         | expr_int . '*' expr_int
   33         | expr_int . '/' expr_int

    '*'  shift, and go to state 52
    '/'  shift, and go to state 53

    $default  reduce using rule 31 (expr_int)


state 90

   30 expr_int: expr_int . '+' expr_int
   31         | expr_int . '-' expr_int
   32         | expr_int . '*' expr_int
   32         | expr_int '*' expr_int .
   33         | expr_int . '/' expr_int

    $default  reduce using rule 32 (expr_int)


state 91

   30 expr_int: expr_int . '+' expr_int
   31         | expr_int . '-' expr_int
   32         | expr_int . '*' expr_int
   33         | expr_int . '/' expr_int
   33         | expr_int '/' expr_int .

    $default  reduce using rule 33 (expr_int)


state 92

   67 primary_double: NAME .

    $default  reduce using rule 67 (primary_double)


state 93

   35 expr_double: expr_double . '+' expr_double
   35            | expr_double '+' expr_double .
   36            | expr_double . '-' expr_double
   37            | expr_double . '*' expr_double
   38            | expr_double . '/' expr_double

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    $default  reduce using rule 35 (expr_double)


state 94

   35 expr_double: expr_double . '+' expr_double
   36            | expr_double . '-' expr_double
   36            | expr_double '-' expr_double .
   37            | expr_double . '*' expr_double
   38            | expr_double . '/' expr_double

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    $default  reduce using rule 36 (expr_double)


state 95

   35 expr_double: expr_double . '+' expr_double
   36            | expr_double . '-' expr_double
   37            | expr_double . '*' expr_double
   37            | expr_double '*' expr_double .
   38            | expr_double . '/' expr_double

    $default  reduce using rule 37 (expr_double)


state 96

   35 expr_double: expr_double . '+' expr_double
   36            | expr_double . '-' expr_double
   37            | expr_double . '*' expr_double
   38            | expr_double . '/' expr_double
   38            | expr_double '/' expr_double .

    $default  reduce using rule 38 (expr_double)


state 97

   65 primary_int: NAME .
   67 primary_double: NAME .
   69 primary_string: NAME .
   71 primary_bool: NAME .

    $end            reduce using rule 65 (primary_int)
    $end            [reduce using rule 67 (primary_double)]
    $end            [reduce using rule 69 (primary_string)]
    $end            [reduce using rule 71 (primary_bool)]
    DOUBLE_LITERAL  reduce using rule 65 (primary_int)
    DOUBLE_LITERAL  [reduce using rule 67 (primary_double)]
    DOUBLE_LITERAL  [reduce using rule 69 (primary_string)]
    DOUBLE_LITERAL  [reduce using rule 71 (primary_bool)]
    INT_LITERAL     reduce using rule 65 (primary_int)
    INT_LITERAL     [reduce using rule 67 (primary_double)]
    INT_LITERAL     [reduce using rule 69 (primary_string)]
    INT_LITERAL     [reduce using rule 71 (primary_bool)]
    BOOL_LITERAL    reduce using rule 65 (primary_int)
    BOOL_LITERAL    [reduce using rule 67 (primary_double)]
    BOOL_LITERAL    [reduce using rule 69 (primary_string)]
    BOOL_LITERAL    [reduce using rule 71 (primary_bool)]
    STRING_LITERAL  reduce using rule 65 (primary_int)
    STRING_LITERAL  [reduce using rule 67 (primary_double)]
    STRING_LITERAL  [reduce using rule 69 (primary_string)]
    STRING_LITERAL  [reduce using rule 71 (primary_bool)]
    NAME            reduce using rule 65 (primary_int)
    NAME            [reduce using rule 67 (primary_double)]
    NAME            [reduce using rule 69 (primary_string)]
    NAME            [reduce using rule 71 (primary_bool)]
    '+'             reduce using rule 65 (primary_int)
    '+'             [reduce using rule 67 (primary_double)]
    '+'             [reduce using rule 69 (primary_string)]
    '+'             [reduce using rule 71 (primary_bool)]
    '-'             reduce using rule 65 (primary_int)
    '-'             [reduce using rule 67 (primary_double)]
    '-'             [reduce using rule 69 (primary_string)]
    '-'             [reduce using rule 71 (primary_bool)]
    '*'             reduce using rule 65 (primary_int)
    '*'             [reduce using rule 67 (primary_double)]
    '*'             [reduce using rule 69 (primary_string)]
    '*'             [reduce using rule 71 (primary_bool)]
    '/'             reduce using rule 65 (primary_int)
    '/'             [reduce using rule 67 (primary_double)]
    '/'             [reduce using rule 69 (primary_string)]
    '/'             [reduce using rule 71 (primary_bool)]
    ')'             reduce using rule 65 (primary_int)
    ')'             [reduce using rule 67 (primary_double)]
    ')'             [reduce using rule 69 (primary_string)]
    ')'             [reduce using rule 71 (primary_bool)]
    EQUAL           reduce using rule 65 (primary_int)
    EQUAL           [reduce using rule 71 (primary_bool)]
    PRINT           reduce using rule 65 (primary_int)
    PRINT           [reduce using rule 67 (primary_double)]
    PRINT           [reduce using rule 69 (primary_string)]
    PRINT           [reduce using rule 71 (primary_bool)]
    VAR             reduce using rule 65 (primary_int)
    VAR             [reduce using rule 67 (primary_double)]
    VAR             [reduce using rule 69 (primary_string)]
    VAR             [reduce using rule 71 (primary_bool)]
    FUNCTION        reduce using rule 65 (primary_int)
    FUNCTION        [reduce using rule 67 (primary_double)]
    FUNCTION        [reduce using rule 69 (primary_string)]
    FUNCTION        [reduce using rule 71 (primary_bool)]
    NOTEQUAL        reduce using rule 65 (primary_int)
    NOTEQUAL        [reduce using rule 71 (primary_bool)]
    '<'             reduce using rule 65 (primary_int)
    '<'             [reduce using rule 71 (primary_bool)]
    '>'             reduce using rule 65 (primary_int)
    '>'             [reduce using rule 71 (primary_bool)]
    SMALLEREQUAL    reduce using rule 65 (primary_int)
    SMALLEREQUAL    [reduce using rule 71 (primary_bool)]
    GREATEREQUAL    reduce using rule 65 (primary_int)
    GREATEREQUAL    [reduce using rule 71 (primary_bool)]
    IF              reduce using rule 65 (primary_int)
    IF              [reduce using rule 67 (primary_double)]
    IF              [reduce using rule 69 (primary_string)]
    IF              [reduce using rule 71 (primary_bool)]
    WHILE           reduce using rule 65 (primary_int)
    WHILE           [reduce using rule 67 (primary_double)]
    WHILE           [reduce using rule 69 (primary_string)]
    WHILE           [reduce using rule 71 (primary_bool)]
    '}'             reduce using rule 65 (primary_int)
    '}'             [reduce using rule 67 (primary_double)]
    '}'             [reduce using rule 69 (primary_string)]
    '}'             [reduce using rule 71 (primary_bool)]
    $default        reduce using rule 65 (primary_int)


state 98

   30 expr_int: expr_int . '+' expr_int
   31         | expr_int . '-' expr_int
   32         | expr_int . '*' expr_int
   33         | expr_int . '/' expr_int
   41 expr_string: expr_string '+' expr_int .

    '*'  shift, and go to state 52
    '/'  shift, and go to state 53

    $default  reduce using rule 41 (expr_string)


state 99

   35 expr_double: expr_double . '+' expr_double
   36            | expr_double . '-' expr_double
   37            | expr_double . '*' expr_double
   38            | expr_double . '/' expr_double
   42 expr_string: expr_string '+' expr_double .

    '*'  shift, and go to state 56
    '/'  shift, and go to state 57

    $default  reduce using rule 42 (expr_string)


state 100

   40 expr_string: expr_string . '+' expr_string
   40            | expr_string '+' expr_string .
   41            | expr_string . '+' expr_int
   42            | expr_string . '+' expr_double
   43            | expr_string . '+' expr_bool

    $default  reduce using rule 40 (expr_string)


state 101

   43 expr_string: expr_string '+' expr_bool .

    $default  reduce using rule 43 (expr_string)


state 102

   52 expr_cmp_eq: primary_int EQUAL primary_int .

    $default  reduce using rule 52 (expr_cmp_eq)


state 103

   54 expr_cmp_noteq: primary_int NOTEQUAL primary_int .

    $default  reduce using rule 54 (expr_cmp_noteq)


state 104

   58 expr_cmp_smaller: primary_int '<' primary_int .

    $default  reduce using rule 58 (expr_cmp_smaller)


state 105

   56 expr_cmp_greater: primary_int '>' primary_int .

    $default  reduce using rule 56 (expr_cmp_greater)


state 106

   62 expr_cmp_smallerequal: primary_int SMALLEREQUAL primary_int .

    $default  reduce using rule 62 (expr_cmp_smallerequal)


state 107

   60 expr_cmp_greaterequal: primary_int GREATEREQUAL primary_int .

    $default  reduce using rule 60 (expr_cmp_greaterequal)


state 108

   71 primary_bool: NAME .

    $default  reduce using rule 71 (primary_bool)


state 109

   53 expr_cmp_eq: primary_bool EQUAL primary_bool .

    $default  reduce using rule 53 (expr_cmp_eq)


state 110

   55 expr_cmp_noteq: primary_bool NOTEQUAL primary_bool .

    $default  reduce using rule 55 (expr_cmp_noteq)


state 111

   59 expr_cmp_smaller: primary_bool '<' primary_bool .

    $default  reduce using rule 59 (expr_cmp_smaller)


state 112

   57 expr_cmp_greater: primary_bool '>' primary_bool .

    $default  reduce using rule 57 (expr_cmp_greater)


state 113

   63 expr_cmp_smallerequal: primary_bool SMALLEREQUAL primary_bool .

    $default  reduce using rule 63 (expr_cmp_smallerequal)


state 114

   61 expr_cmp_greaterequal: primary_bool GREATEREQUAL primary_bool .

    $default  reduce using rule 61 (expr_cmp_greaterequal)


state 115

   26 call_func: NAME '(' set_var ')' .

    $default  reduce using rule 26 (call_func)


state 116

   28 expr_print: PRINT '(' stmt ')' .

    $default  reduce using rule 28 (expr_print)


state 117

   29 expr_print: PRINT '(' expr ')' .

    $default  reduce using rule 29 (expr_print)


state 118

   11 def_func: FUNCTION NAME '(' ')' . TYPE_LITERAL '{' stmt '}'

    TYPE_LITERAL  shift, and go to state 122


state 119

   10 def_func: FUNCTION NAME '(' def_var . ')' TYPE_LITERAL '{' stmt '}'

    ')'  shift, and go to state 123


state 120

    9 stmt: stmt . stmt
   14 if_stmt: IF expr_bool '{' stmt . '}' ELSE '{' stmt '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10
    '}'             shift, and go to state 124

    stmt                   go to state 45
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 121

    9 stmt: stmt . stmt
   15 while_stmt: WHILE expr_bool '{' stmt . '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10
    '}'             shift, and go to state 125

    stmt                   go to state 45
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 122

   11 def_func: FUNCTION NAME '(' ')' TYPE_LITERAL . '{' stmt '}'

    '{'  shift, and go to state 126


state 123

   10 def_func: FUNCTION NAME '(' def_var ')' . TYPE_LITERAL '{' stmt '}'

    TYPE_LITERAL  shift, and go to state 127


state 124

   14 if_stmt: IF expr_bool '{' stmt '}' . ELSE '{' stmt '}'

    ELSE  shift, and go to state 128


state 125

   15 while_stmt: WHILE expr_bool '{' stmt '}' .

    $default  reduce using rule 15 (while_stmt)


state 126

   11 def_func: FUNCTION NAME '(' ')' TYPE_LITERAL '{' . stmt '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    stmt                   go to state 129
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 127

   10 def_func: FUNCTION NAME '(' def_var ')' TYPE_LITERAL . '{' stmt '}'

    '{'  shift, and go to state 130


state 128

   14 if_stmt: IF expr_bool '{' stmt '}' ELSE . '{' stmt '}'

    '{'  shift, and go to state 131


state 129

    9 stmt: stmt . stmt
   11 def_func: FUNCTION NAME '(' ')' TYPE_LITERAL '{' stmt . '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10
    '}'             shift, and go to state 132

    stmt                   go to state 45
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 130

   10 def_func: FUNCTION NAME '(' def_var ')' TYPE_LITERAL '{' . stmt '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    stmt                   go to state 133
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 131

   14 if_stmt: IF expr_bool '{' stmt '}' ELSE '{' . stmt '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10

    stmt                   go to state 134
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 132

   11 def_func: FUNCTION NAME '(' ')' TYPE_LITERAL '{' stmt '}' .

    $default  reduce using rule 11 (def_func)


state 133

    9 stmt: stmt . stmt
   10 def_func: FUNCTION NAME '(' def_var ')' TYPE_LITERAL '{' stmt . '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10
    '}'             shift, and go to state 135

    stmt                   go to state 45
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 134

    9 stmt: stmt . stmt
   14 if_stmt: IF expr_bool '{' stmt '}' ELSE '{' stmt . '}'

    DOUBLE_LITERAL  shift, and go to state 1
    INT_LITERAL     shift, and go to state 2
    BOOL_LITERAL    shift, and go to state 3
    STRING_LITERAL  shift, and go to state 4
    NAME            shift, and go to state 5
    PRINT           shift, and go to state 6
    VAR             shift, and go to state 7
    FUNCTION        shift, and go to state 8
    IF              shift, and go to state 9
    WHILE           shift, and go to state 10
    '}'             shift, and go to state 136

    stmt                   go to state 45
    def_func               go to state 13
    def_var                go to state 14
    set_var                go to state 15
    if_stmt                go to state 16
    while_stmt             go to state 17
    expr                   go to state 18
    call_func              go to state 19
    expr_print             go to state 20
    expr_int               go to state 21
    expr_double            go to state 22
    expr_string            go to state 23
    expr_bool              go to state 24
    expr_cmp_eq            go to state 25
    expr_cmp_noteq         go to state 26
    expr_cmp_greater       go to state 27
    expr_cmp_smaller       go to state 28
    expr_cmp_greaterequal  go to state 29
    expr_cmp_smallerequal  go to state 30
    primary_int            go to state 31
    primary_double         go to state 32
    primary_string         go to state 33
    primary_bool           go to state 34


state 135

   10 def_func: FUNCTION NAME '(' def_var ')' TYPE_LITERAL '{' stmt '}' .

    $default  reduce using rule 10 (def_func)


state 136

   14 if_stmt: IF expr_bool '{' stmt '}' ELSE '{' stmt '}' .

    $default  reduce using rule 14 (if_stmt)
